# -*- coding: utf-8 -*-

#
# Операции со строками
#

# Специальные строковые операторы

# Предположим, переменная строки a содержит ‘Hello‘, а переменная b — ‘Python‘:

# ---------------------------------------------------------------------------------------
# Operator 	        Description 	                            Example
# ---------------------------------------------------------------------------------------
#
#   + 	            конкатенация — добавление значений с
#                   обеих сторон от оператора 	                a + b вернёт HelloPython
#
#   * 	            повторение — создаёт новую строку, в
#                   которой объединены копии той же строки 	    a*2 вернёт HelloHello
#
#   [] 	            срез (slice) — возвращает символ с
#                   указанным индексом 	                        a[1] вернёт e

#   [ : ] 	        срез диапазона — возвращает символы с
#                   заданном диапазоне индексов 	            a[1:4] вернёт ell
#
#   in 	            членство (membership) — возвращает
#                   истину (true, 1) если заданный символ
#                   присутствует в строке 	                    H in a вернёт 1
#
#   not in 	        членство  (membership) — возвращает
#                   истину (true, 1) если заданный символ
#                   не присутствует в строке 	                M not in a вернёт 1
#
#   r/R 	        обычная строка (raw string) — подавляет
#                   значение escape-последовательностей;
#                   синтаксис таких строк такой же, как  и
#                   у обычных строк, за исключением оператора
#                   r или R, который добавляется
#                   непосредтсвенно  перед открывающей
#                   кавычкой 	                                print r’n’ вернёт  n
#                                                               print R’n’ вернёт  n
#
#   % 	            format — выполнение форматирования
#                   строки
# ---------------------------------------------------------------------------------------

a = 'Hello'
b = 'Python'

# Конкатенация.
print(a + b)            # a + b вернёт HelloPython

# Повторение
print(a * 2)            # a*2 вернёт HelloHello

# Cрез (slice)
print(a[1])             # a[1] вернёт e

# Cрез диапазона
print(a[1:4])           # a[1:4] вернёт ell

# Членство (membership)
print('H' in a)         # H in a вернёт 1
print('M' not in a)     # M not in a вернёт 1

# Обычная строка (raw string)
print(r'Line1\nLine2')  # print r'n' вернёт  Line1\nLine2
print(R'Line1\tLine2')  # print R'n' вернёт  Line1\tLine2

# Format
z = 15
print("{0} in binary {0:08b} in hex {0:02x} in octal {0:02o}".format(z))

# Приведение числа к строке с помощью функции str():
name = "Tom"
age = 33
info = "Name: " + name + " Age: " + str(age)
print(info)  # Name: Tom Age: 33

# Кроме того, существуют символы, которые вроде бы сложно
# использовать в строке. Например, кавычки. И чтобы отобразить
# кавычки (как двойные, так и одинарные) внутри строки,
# перед ними ставится слеш:
print("Кафе \"Central Perk\"")

# Эскейп-последовательности
# наиболее распространенные это;

# '\n' - перенос строки
print("Время пришло в гости отправится\nждет меня старинный друг")

# '\t' - табуляция
print('Колонка1\tКолонка2\tКолонка3')
