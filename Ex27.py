#!/usr/bin/python3
# -*- coding: utf-8 -*-

#
# Методы и функции по работе со списками
#

#####################################################################
# Для управления элементами списки имеют целый ряд методов:
#
#   append(item)       : добавляет элемент item в конец списка
#
#   insert(index, item): добавляет элемент item в список по индексу index
#
#   remove(item)       : удаляет элемент item. Удаляется только первое
#                        вхождение элемента. Если элемент не найден,
#                        генерирует исключение ValueError
#
#   clear()            : удаление всех элементов из списка
#
#   index(item)        : возвращает индекс элемента item. Если элемент
#                        не найден, генерирует исключение ValueError
#
#   pop([index])       : удаляет и возвращает элемент по индексу index.
#                        Если индекс не передан, то просто удаляет
#                        последний элемент.
#
#   count(item)        : возвращает количество вхождений элемента
#                        item в список

#   sort([key])        : сортирует элементы. По умолчанию сортирует
#                        по возрастанию. Но с помощью параметра key
#                        мы можем передать функцию сортировки.
#
#   reverse()          : расставляет все элементы в списке в обратном порядке

#####################################################################
# Кроме того, Python предоставляет ряд встроенных функций для работы со списками:

#   len(list)          : возвращает длину списка

#   sorted(list, [key]): возвращает отсортированный список

#   min(list)          : возвращает наименьший элемент списка

#   max(list)          : возвращает наибольший элемент списка

#####################################################################
# Добавление и удаление элементов
#

# Для добавления элемента применяются методы append() и insert,
# а для удаления - методы remove(), pop() и clear().

import copy
users = ["Tom", "Bob"]

# добавляем в конец списка
users.append("Alice")  # ["Tom", "Bob", "Alice"]
# добавляем на вторую позицию
users.insert(1, "Bill")          # ["Tom", "Bill", "Bob", "Alice"]

# получаем индекс элемента
i = users.index("Tom")
# удаляем по этому индексу
removed_item = users.pop(i)            # ["Bill", "Bob", "Alice"]

last_user = users[-1]
# удаляем последний элемент
users.remove(last_user)           # ["Bill", "Bob"]

print(users)

# удаляем все элементы
users.clear()

#####################################################################
# Проверка наличия элемента
#

# Если определенный элемент не найден, то методы remove и
# index генерируют исключение. Чтобы избежать подобной ситуации,
#  перед операцией с элементом можно проверять его наличие
# с помощью ключевого слова in:

companies = ["Microsoft", "Google", "Oracle", "Apple"]
item = "Oracle"  # элемент для удаления
if item in companies:
    companies.remove(item)

print(companies)

#####################################################################
# Подсчет вхождений
#

# Если необходимо узнать, сколько раз в списке присутствует тот
# или иной элемент, то можно применить метод count():

users = ["Tom", "Bob", "Alice", "Tom", "Bill", "Tom"]

users_count = users.count("Tom")
print(users_count)      # 3

#####################################################################
# сортировка
#

# Для сортировки по возрастанию применяется метод sort():

users = ["Tom", "Bob", "Alice", "Sam", "Bill"]

users.sort()
print(users)      # ["Alice", "Bill", "Bob", "Sam", "Tom"]

# Если необходимо отсортировать данные в обратном порядке,
# то мы можем после сортировки применить метод reverse():

users = ["Tom", "Bob", "Alice", "Sam", "Bill"]

users.sort()
users.reverse()
print(users)      # ["Tom", "Sam", "Bob", "Bill", "Alice"]

#####################################################################
# Минимальное и максимальное значения
#

numbers = [9, 21, 12, 1, 3, 15, 18]
print(min(numbers))     # 1
print(max(numbers))     # 21

#####################################################################
# Копирование списков
#

# При копировании списков следует учитывать, что списки представляют
# изменяемый (mutable) тип, поэтому если обе переменных будут
# указывать на один и тот же список, то изменение одной переменной,
# затронет и другую переменную:

users1 = ["Tom", "Bob", "Alice"]
users2 = users1
users2.append("Sam")
# users1 и users2 указывают на один и тот же список
print(users1)   # ["Tom", "Bob", "Alice", "Sam"]
print(users2)   # ["Tom", "Bob", "Alice", "Sam"]

# Это так называемое "поверхностное копирование" (shallow copy).
# И, как правило, такое поведение нежелательное. И чтобы происходило
# копирование элементов, но при этом переменные указывали на разные списки,
# необходимо выполнить глубокое копирование (deep copy). Для этого можно
# использовать метод deepcopy(), который определен во встроенном
# модуле copy:


users1 = ["Tom", "Bob", "Alice"]
users2 = copy.deepcopy(users1)
users2.append("Sam")
# пееменные users1 и users2 указывают на разные списки
print(users1)   # ["Tom", "Bob", "Alice"]
print(users2)   # ["Tom", "Bob", "Alice", "Sam"]

#####################################################################
# Копирование части списка
#

# Если необходимо скопировать не весь список, а только его какую-то 
# определенную часть, то мы можем применять специальный синтаксис. 
# который может принимать следующие формы:

#   list[:end]          : через параметр end передается индекс 
#                         элемента, до которого нужно копировать 
#                         список

#   list[start:end]     : параметр start указывает на индекс элемента, 
#                         начиная с которого надо скопировать элементы

#   ist[start:end:step] : параметр step указывает на шаг, через который 
#                         будут копироваться элементы из списка. 
#                         По умолчанию этот параметр равен 1.
	
users = ["Tom", "Bob", "Alice", "Sam", "Tim", "Bill"]
 
slice_users1 = users[:3]   # с 0 по 3
print(slice_users1)   # ["Tom", "Bob", "Alice"]
 
slice_users2 = users[1:3]   # с 1 по 3
print(slice_users2)   # ["Bob", "Alice"]
 
slice_users3 = users[1:6:2]   # с 1 по 6 с шагом 2
print(slice_users3)   # ["Bob", "Sam", "Bill"]

#####################################################################
# Соединение списков
#

# Для объединения списков применяется операция сложения (+):
	
users1 = ["Tom", "Bob", "Alice"]
users2 = ["Tom", "Sam", "Tim", "Bill"]
users3 = users1 + users2
print(users3)   # ["Tom", "Bob", "Alice", "Tom", "Sam", "Tim", "Bill"]

#####################################################################
# Списки списков
#

# Списки кроме стандартных данных типа строк, чисел, также могут 
# содержать другие списки. Подобные списки можно ассоциировать с 
# таблицами, где вложенные списки выполняют роль строк. Например:
	
users = [
    ["Tom", 29],
    ["Alice", 33],
    ["Bob", 27]
]
 
print(users[0])         # ["Tom", 29]
print(users[0][0])      # Tom
print(users[0][1])      # 29

# Чтобы обратиться к элементу вложенного списка, необходимо 
# использовать пару индексов: users[0][1] - обращение ко второму 
# элементу первого вложенного списка.